#!/usr/bin/env python3
import os #for the purpose of interacting with directories in a system using python, the os library is used
#import glob can also be used tho glob is mostly a filename pattern matching library, but it can be used to list items in current dir like matching with wildcards * and paired with types like .txt (*.txt finds all text files)
import hashlib #library for hashing like MD5, SHA, etc.
#import glob #for same as os library but with glob you can filter better and recursively search subdirectories from current

def matcher():
  hash_to_match = "6859e1d10d08c1ea91f6e53ba6d601149b08d4efab8f8c2d586f6858ae1773a7" #the hash included in cyberlabs to match signature is of type SHA256
  solution_file = "" #variable to store the "actual name" of the file that matches
  #the guess is going to equate to the file in bytes given with the hint: You can read a file a>
  path = os.getcwd() #path is the current working directory (. means CWD) if you want to change the path, edit the string
  #if you want this python script to execute by default must be used inside of ~/bin else change the path
  files = os.listdir(path) #method in python, used to get the list of all files and directories in the specified directory and puts them into a list (files and directories included)
  #files = glob.glob("**/*") #search from current directory into bin directory and locate all files

  for file_name in files: #for-loop to start iterating through all files in CWD(current working directory) from the variable files which is a type list
    with open(file_name, 'rb') as f: #rb meaning reading binary files which are the ones in our case
      data = f.read() #reading the data as bytes with f.read() for the file

    hashGuess = hashlib.sha256(data).hexdigest() #storing inside the hashGuess variable is the hash value for each file in the for loop

    if hashGuess == hash_to_match: #The hash in this iteration matches the hash we have to match
      #file = file_name.split("/") #split the into the list with index 1 file being the filename and index 0 being the /bin folder
      #solution_file = file[1] #set the empty solution variable to be equal to that file name by only setting index 1
      solution_file = file_name
      print("The file that matches this SHA256 hash is: " + solution_file) #extra print just to have some more information as to what is the file that matches the SHA256 hash
      print("FS{" + solution_file +  #print the flag in the FS{filename} format
"}")
matcher() #calling the matcher function to run the code

#side note: running on the command line:
#find . -type f -exec sha256sum {} \; | grep "6859e1d10d08c1ea91f6e53ba6d601149b08d4efab8f8c2d586f6858ae1773a7"
#^command line code above also provides the same search result
